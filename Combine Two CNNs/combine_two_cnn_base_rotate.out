Unloading the anaconda2 module (if loaded)...
Loaded dependency: anaconda3/2020.11
AI/Version: anaconda3.2020.11
-----------------------------

Description
-----------
The modulefile AI/anaconda3.2020.11 provides a unified, rich, anaconda3 based
environment for Artificial Intelligence(AI)/Machine Learning(ML)/Big Data(BD)
on top of based on Python 3.

Module contents
---------------
Several popular AI/ML/BD packages are included in this environment, such as:
    tensorflow-gpu, theano, keras-gpu, pytorch, opencv, pandas, scikit-learn,
scikit-image etc.

To check the full list of available packages in this environment, first
activate it and then run the command
    conda list

Main packages included in this module:
* astropy 4.2
* blas 1.0
* bokeh 2.2.3
* cudatoolkit 10.0.130
* cudnn 7.6.5
* h5py 2.8.0
* hdf5 1.10.2
* ipython 7.19.0
* jupyter 1.0.0
* jupyterlab 2.2.6
* keras-gpu 2.3.1
* matplotlib 3.3.2
* mkl 2019.4
* nccl 1.3.5
* networkx 2.5
* ninja 1.10.2
* nltk 3.5
* notebook 6.1.6
* numba 0.51.2
* numpy 1.17.0
* opencv 3.4.2
* pandas 1.2.0
* pillow 8.1.0
* pip 20.3.3
* python 3.8.5
* pytorch 1.5.0
* scikit-learn 0.23.2
* scipy 1.5.2
* seaborn 0.11.1
* tensorboard 1.15.0
* tensorflow-gpu 1.15.0
* theano 1.0.4

If you need to further customize this environment (e.g., install additional
packages, or upgrade a particular package),
you should first clone this environment as follows:
    conda create --prefix <path to a dir in which you can write> --clone
$AI_ENV
Then activate the newly spawned environment and proceed with your
customization.

To get further help with conda usage, you can try one of the following:
    conda -h
    conda <command> -h

Activate the module
-------------------
Before activating, make sure you are on a GPU node of Bridges2 if you wish to
use the components built to run on GPUs.
To activate the environment, run the following commands:
    # module load AI/anaconda3.2020.11
    source activate $AI_ENV
        # OR
    conda activate $AI_ENV # This might require you to run "conda init" first.

2021-12-05 18:18:03.288209: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory
2021-12-05 18:18:03.288485: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.
2021-12-05 18:19:01.464458: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory
2021-12-05 18:19:01.464868: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcublas.so.11'; dlerror: libcublas.so.11: cannot open shared object file: No such file or directory
2021-12-05 18:19:01.465256: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcublasLt.so.11'; dlerror: libcublasLt.so.11: cannot open shared object file: No such file or directory
2021-12-05 18:19:01.465665: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcufft.so.10'; dlerror: libcufft.so.10: cannot open shared object file: No such file or directory
2021-12-05 18:19:01.467033: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcurand.so.10'; dlerror: libcurand.so.10: cannot open shared object file: No such file or directory
2021-12-05 18:19:01.467447: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcusolver.so.11'; dlerror: libcusolver.so.11: cannot open shared object file: No such file or directory
2021-12-05 18:19:01.467764: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcusparse.so.11'; dlerror: libcusparse.so.11: cannot open shared object file: No such file or directory
2021-12-05 18:19:01.467942: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcudnn.so.8'; dlerror: libcudnn.so.8: cannot open shared object file: No such file or directory
2021-12-05 18:19:01.494701: W tensorflow/core/common_runtime/gpu/gpu_device.cc:1850] Cannot dlopen some GPU libraries. Please make sure the missing libraries mentioned above are installed properly if you would like to use GPU. Follow the guide at https://www.tensorflow.org/install/gpu for how to download and setup the required libraries for your platform.
Skipping registering GPU devices...
2021-12-05 18:19:01.538028: I tensorflow/core/platform/cpu_feature_guard.cc:151] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
combine two cnn baseline + rotate!
Model: "model"
__________________________________________________________________________________________________
 Layer (type)                   Output Shape         Param #     Connected to                     
==================================================================================================
 input_1 (InputLayer)           [(None, 96, 96, 3)]  0           []                               
                                                                                                  
 sequential (Sequential)        (None, 96, 96, 3)    0           ['input_1[0][0]']                
                                                                                                  
 conv2d (Conv2D)                (None, 94, 94, 16)   448         ['input_1[0][0]']                
                                                                                                  
 conv2d_6 (Conv2D)              (None, 94, 94, 16)   448         ['sequential[0][0]']             
                                                                                                  
 conv2d_1 (Conv2D)              (None, 92, 92, 16)   2320        ['conv2d[0][0]']                 
                                                                                                  
 conv2d_7 (Conv2D)              (None, 92, 92, 16)   2320        ['conv2d_6[0][0]']               
                                                                                                  
 max_pooling2d (MaxPooling2D)   (None, 46, 46, 16)   0           ['conv2d_1[0][0]']               
                                                                                                  
 max_pooling2d_3 (MaxPooling2D)  (None, 46, 46, 16)  0           ['conv2d_7[0][0]']               
                                                                                                  
 conv2d_2 (Conv2D)              (None, 44, 44, 32)   4640        ['max_pooling2d[0][0]']          
                                                                                                  
 conv2d_8 (Conv2D)              (None, 44, 44, 32)   4640        ['max_pooling2d_3[0][0]']        
                                                                                                  
 conv2d_3 (Conv2D)              (None, 42, 42, 32)   9248        ['conv2d_2[0][0]']               
                                                                                                  
 conv2d_9 (Conv2D)              (None, 42, 42, 32)   9248        ['conv2d_8[0][0]']               
                                                                                                  
 max_pooling2d_1 (MaxPooling2D)  (None, 21, 21, 32)  0           ['conv2d_3[0][0]']               
                                                                                                  
 max_pooling2d_4 (MaxPooling2D)  (None, 21, 21, 32)  0           ['conv2d_9[0][0]']               
                                                                                                  
 conv2d_4 (Conv2D)              (None, 19, 19, 64)   18496       ['max_pooling2d_1[0][0]']        
                                                                                                  
 conv2d_10 (Conv2D)             (None, 19, 19, 64)   18496       ['max_pooling2d_4[0][0]']        
                                                                                                  
 conv2d_5 (Conv2D)              (None, 17, 17, 64)   36928       ['conv2d_4[0][0]']               
                                                                                                  
 conv2d_11 (Conv2D)             (None, 17, 17, 64)   36928       ['conv2d_10[0][0]']              
                                                                                                  
 max_pooling2d_2 (MaxPooling2D)  (None, 8, 8, 64)    0           ['conv2d_5[0][0]']               
                                                                                                  
 max_pooling2d_5 (MaxPooling2D)  (None, 8, 8, 64)    0           ['conv2d_11[0][0]']              
                                                                                                  
 flatten (Flatten)              (None, 4096)         0           ['max_pooling2d_2[0][0]']        
                                                                                                  
 flatten_1 (Flatten)            (None, 4096)         0           ['max_pooling2d_5[0][0]']        
                                                                                                  
 dense (Dense)                  (None, 256)          1048832     ['flatten[0][0]']                
                                                                                                  
 dense_2 (Dense)                (None, 256)          1048832     ['flatten_1[0][0]']              
                                                                                                  
 dropout (Dropout)              (None, 256)          0           ['dense[0][0]']                  
                                                                                                  
 dropout_2 (Dropout)            (None, 256)          0           ['dense_2[0][0]']                
                                                                                                  
 dense_1 (Dense)                (None, 128)          32896       ['dropout[0][0]']                
                                                                                                  
 dense_3 (Dense)                (None, 128)          32896       ['dropout_2[0][0]']              
                                                                                                  
 dropout_1 (Dropout)            (None, 128)          0           ['dense_1[0][0]']                
                                                                                                  
 dropout_3 (Dropout)            (None, 128)          0           ['dense_3[0][0]']                
                                                                                                  
 concatenate (Concatenate)      (None, 256)          0           ['dropout_1[0][0]',              
                                                                  'dropout_3[0][0]']              
                                                                                                  
 dense_4 (Dense)                (None, 2)            514         ['concatenate[0][0]']            
                                                                                                  
==================================================================================================
Total params: 2,308,130
Trainable params: 2,308,130
Non-trainable params: 0
__________________________________________________________________________________________________
Epoch 1/10
2048/2048 - 460s - loss: 0.4950 - accuracy: 0.7648 - val_loss: 0.5135 - val_accuracy: 0.7517 - 460s/epoch - 224ms/step
Epoch 2/10
2048/2048 - 453s - loss: 0.3867 - accuracy: 0.8295 - val_loss: 0.4455 - val_accuracy: 0.8119 - 453s/epoch - 221ms/step
Epoch 3/10
2048/2048 - 453s - loss: 0.3371 - accuracy: 0.8553 - val_loss: 0.4742 - val_accuracy: 0.7898 - 453s/epoch - 221ms/step
Epoch 4/10
2048/2048 - 452s - loss: 0.3139 - accuracy: 0.8666 - val_loss: 0.4846 - val_accuracy: 0.7893 - 452s/epoch - 221ms/step
Epoch 5/10
2048/2048 - 452s - loss: 0.2998 - accuracy: 0.8745 - val_loss: 0.3567 - val_accuracy: 0.8427 - 452s/epoch - 221ms/step
Epoch 6/10
2048/2048 - 452s - loss: 0.2775 - accuracy: 0.8843 - val_loss: 0.3526 - val_accuracy: 0.8506 - 452s/epoch - 221ms/step
Epoch 7/10
2048/2048 - 452s - loss: 0.2701 - accuracy: 0.8891 - val_loss: 0.3754 - val_accuracy: 0.8346 - 452s/epoch - 221ms/step
Epoch 8/10
2048/2048 - 452s - loss: 0.2543 - accuracy: 0.8974 - val_loss: 0.4156 - val_accuracy: 0.8233 - 452s/epoch - 221ms/step
Epoch 9/10
2048/2048 - 454s - loss: 0.2487 - accuracy: 0.8991 - val_loss: 0.4158 - val_accuracy: 0.8235 - 454s/epoch - 222ms/step
Epoch 10/10
2048/2048 - 452s - loss: 0.2347 - accuracy: 0.9064 - val_loss: 0.3914 - val_accuracy: 0.8394 - 452s/epoch - 221ms/step
Test set accuracy is 0.8013
